package Class.Bit;

public class _16_BitGetSet {
    public static void main(String[] args) {
//              // 0100 1010 1110 0010 0000 0000 1011 1011
        int bar = 0b01001010111000100000000010111011;

        // Get : 특정 자리의 비트 값 일기
        //       - 비트 자리 수

        int bitPosition = 30; // bit 범위는 31 ~ 0
        int mask = 0b010000000000000000000000000000;

        int smartMask = 1 << bitPosition; // 0b0000 0000 0000 0000 0000 0000 0000 0001;\
        // 0b 0000 0000 0000 0000 0000 0000 0000 0001;
        // 1 << 30
        // 0b 0100 0000 0000 0000 0000 0000 0000 0000;

        boolean result = (bar & smartMask) != 0;
        System.out.println(result);

//        boolean result = (bar & mask) != 0;
//        int resultInt = (bar & mask) != 0 ? 1 : 0;
//        System.out.println(result);

        // Set : 특정 자리에 비트 값 쓰기
        //       - 비트 자리 수, 값
        // 0100 1010 1110 0010 0000 0000 1011 1011
        int foo = 0b01001010111000100000000010111011;
        int setPosition = 31;
        boolean value = true;

        int set_Mask = 1 << 31;
        // 0b0000 0000 0000 0000 0000 0000 0000 0001
        // 1 << 31
        // 0b1000 0000 0000 0000 0000 0000 0000 0000
        // ~( 1 << 31 ) : 비트 값을 반전 시킨다.
        // 0b0111 1111 1111 1111 1111 1111 1111 1111

        int result2 = foo & mask;
        // OR 연산자 사용시 나오는 값
        //       0100 1010 1110 0010 0000 0000 1011 1011 = foo 값
        //   ->  1100 1010 1110 0010 0000 0000 1011 1011
        // AND 연산자 사용시 나오는 값
        //
        // foo = 0100 1010 1110 0010 0000 0000 1011 1011
        //
        // set_Mask = 1
        // 1 =   0000 0000 0000 0000 0000 0000 0000 0001
        // 연산자 : (1 << 31) 실행시
        //       1000 0000 0000 0000 0000 0000 0000 0000
        //
        //   ->  0111 1111 1111 1111 1111 1111 1111 1111
        // ------------------------------------------------
        //   ->

//              4           3           2           1       = 4비트
//        -------------------------------------------------
//              1           1           0           1       = 원본
//                               OR
//              0           0           0           0       = 마스크
//        -------------------------------------------------
//              1           1           0           1       = 결과


//              4           3           2           1       = 4비트
//        -------------------------------------------------
//              1           1           0           1       = 원본
//                               AND
//              0           0           0           0       = 마스크
//        -------------------------------------------------
//              0           0           0           0       = 결과
//
//      0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
//                                                                  AND
//      1111 1111 1111 1111 0111 1111 1111 1111 1111 1111 1111 1111
//     -------------------------------------------------------------
//              원본         0            원본          원본
//     ~ (틸드) 연산자 모든 비트 값을 반전시킨다
    }
}
